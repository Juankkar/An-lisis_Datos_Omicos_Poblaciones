n_taxa_antes <- ntaxa(physeq);n_taxa_antes
n_taxa_ahora <- ntaxa(clostridiales_taxa);n_taxa_ahora
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq, fill = "Order")
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq, fill = "Family")
?plot_bar()
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia")
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
theme_classic()
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
theme_classic()
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, hjust = .5)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 1)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 5)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = -2)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = -1)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = -.5)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = -.25)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5)
)
## Representa para cada muestra su abundancia para cada una de las familias
plot_bar(physeq,
fill = "Family",
title = "Abundancia para cada familia") +
scale_y_continuous(expand = expansion(0),
limits = c(0,6000)) +
labs(x="Muestra",
y="Abundancia") +
theme_classic() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = .5),
axis.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5)
)
library(knitr)
meta(physeq)
#diversidad_alpha <-
meta(physeq)
#diversidad_alpha <-
meta(physeq) %>% view
diversity(physeq, "shannon")$shannon
#diversidad_alpha <-
meta(physeq) %>%
mutate(diversidad=diversity(physeq, "shannon")$shannon)
#diversidad_alpha <-
meta(physeq) %>%
mutate(diversidad=diversity(physeq, "shannon")$shannon) %>% view
diversidad_alpha <- meta(physeq) %>%
mutate(diversidad=diversity(physeq, "shannon")$shannon)
diversidad_alpha %>% view
## Calcualmos el valor medio de la primera cuestión
diversidad_alpha %>%
group_by(donor_status) %>%
summarise(diversidad_media_alpha=mean(diversidad))
length(diversidad_alpha$diversidad)
## Vemos si existen normalidad en los datos
shapiro.test(diversidad_alpha$diversidad)
## Vemos la normalidad en todos los grupos
shapiro.test(diversidad_alpha$diversidad,
diversidad_alpha$donor_status,
shapiro.test())
## Vemos la normalidad en todos los grupos
shapiro.test(diversidad_alpha$diversidad,
diversidad_alpha$donor_status,
shapiro.test)
## Vemos la normalidad en todos los grupos
tapply(diversidad_alpha$diversidad,
diversidad_alpha$donor_status,
shapiro.test)
install.packages("rstatix")
library(rstatix)
## Vemos la homocedasticidad de los datos
diversidad_alpha %>%
levene_test(diversidad~donor_status, method="mean")
## Vemos la homocedasticidad de los datos
diversidad_alpha %>%
levene_test(diversidad~donor_status)
?levene_test()
## Vemos la homocedasticidad de los datos
diversidad_alpha %>%
levene_test(diversidad~donor_status,
center = mean)
## Vemos la normalidad en todos los grupos vemos que ambos grupos
## tienen p > 0.05, hay normalidad en los datos
diversidad_alpha %>%
group_by(donor_status) %>%
shapiro_test(diversidad)
## Hacemos un t.test
diversidad_alpha %>%
t_test(diversidad~donor_status)
spl <- split(d2$diversity, d2$genotype)
spl <- split(diversidad_alpha$diversity, diversidad_alpha$genotype)
pv <- ks.test(spl$susceptible,
spl$`wild type`)$p.value
pvadj <- p.adjust(pv)
pvadj
spl <- split(diversidad_alpha$diversity, diversidad_alpha$donor_status)
diversidad_alpha$donor_status
diversidad_alpha$diversity
spl <- split(diversidad_alpha$diversidad, diversidad_alpha$donor_status)
pv <- ks.test(spl$susceptible,
spl$`wild type`)$p.value
pv <- ks.test(spl$Healthy,
spl$PD)$p.value
pvadj <- p.adjust(pv)
pvadj
## Vemos la homocedasticidad de los datos p > 0.05
diversidad_alpha %>%
levene_test(diversidad~donor_status,
center = mean)
## Hacemos un t.test p < 0.05
diversidad_alpha %>%
t_test(diversidad~donor_status)
diversidad_alpha %>%
summarise(min_shannon=min(diversidad))
diversidad_alpha
## Cual es la muestra?
diversidad_alpha %>%
arrange(diversidad)
## Cual es la muestra?
diversidad_alpha %>%
arrange(diversidad) %>%
head(n=1)
## Cual es la muestra?
diversidad_alpha %>%
arrange(diversidad) %>%
head(n=1) %>%
as_tibble()
## Cual es la muestra?
diversidad_alpha %>%
arrange(diversidad) %>%
head(n=1) %>%
view()
## Cual es la muestra?
diversidad_alpha %>%
arrange(diversidad) %>%
head(n=1) %>%
view()
subset_taxa(physeq, Class == "Betaproteobacteria")
betaproteobact_class <- subset_taxa(physeq, Class == "Betaproteobacteria")
plot_tree(betaproteobact_class, color = "genotype_and_donor_status")
plot_tree(subset_taxa(physeq, Class == "Betaproteobacteria"),
color = "genotype_and_donor_status",
shape = "Family",
label.tips = "Genus",
size = "abundance",
plot.margin = 0.5,
ladderize = TRUE)
plot_tree(betaproteobact_class,
color = "genotype_and_donor_status",
shape = "Family",
label.tips = "Genus",
size = "abundance",
plot.margin = 0.5,
ladderize = TRUE)
library(phyloseq)
library(vegan)
library(tidyverse)
library(qiime2R)
library(microbiome)
library(knitr)
library(rstatix)
diversidad_alpha <- meta(physeq) %>%
mutate(diversidad=diversity(physeq, "shannon")$shannon)
## Calcualmos el valor medio de la primera cuestión
diversidad_alpha %>%
group_by(donor_status) %>%
summarise(diversidad_media_alpha=mean(diversidad))
SVs <- read_qza("C:/Users/jcge9/OneDrive/Escritorio/Analisis_Datos_Omicos_Poblaciones/actividad2/data/raw/dada2_table.qza")
taxonomy <- read_qza("C:/Users/jcge9/OneDrive/Escritorio/Analisis_Datos_Omicos_Poblaciones/actividad2/data/raw/taxonomy.qza")
taxonomy <- parse_taxonomy(taxonomy$data)
metadata <- read_q2metadata("C:/Users/jcge9/OneDrive/Escritorio/Analisis_Datos_Omicos_Poblaciones/actividad2/data/raw/metadata.tsv")
tree <- read_qza("C:/Users/jcge9/OneDrive/Escritorio/Analisis_Datos_Omicos_Poblaciones/actividad2/data/raw/rooted-tree.qza")
# write.table(ASV, file="C:/Users/jcge9/OneDrive/Escritorio/Analisis_Datos_Omicos_Poblaciones/actividad2/data/processed/ASV.tsv",
#             quote=FALSE,
#             sep='\t',
#             col.names = TRUE)
# write.table(taxonomy, file='C:/Users/jcge9/OneDrive/Escritorio/Analisis_Datos_Omicos_Poblaciones/actividad2/data/processed/taxonomy.tsv',
#             quote=FALSE,
#             sep='\t',
#             col.names = TRUE)
ASVmat <- as.matrix(read.table("C:/Users/jcge9/OneDrive/Escritorio/Analisis_Datos_Omicos_Poblaciones/actividad2/data/processed/ASV.tsv",
sep="\t"))
taxmat <- as.matrix(read.table("C:/Users/jcge9/OneDrive/Escritorio/Analisis_Datos_Omicos_Poblaciones/actividad2/data/processed/taxonomy.tsv",
sep="\t"))
ASV <- otu_table(ASVmat, taxa_are_rows = TRUE)
tax_table(taxmat) %>% view()
TAX <- tax_table(taxmat)
rownames(metadata)=metadata$SampleID
metadata<-sample_data(metadata)
physeq = phyloseq(ASV, TAX, metadata, tree$data)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq.clos = subset_taxa(physeq, Class == "Clostridia")
diversidad_alpha <- meta(physeq) %>%
mutate(diversidad=diversity(physeq, "shannon")$shannon)
## Calcualmos el valor medio de la primera cuestión
diversidad_alpha %>%
group_by(donor_status) %>%
summarise(diversidad_media_alpha=mean(diversidad))
## Sin separar los grupos p > 0.05
shapiro.test(diversidad_alpha$diversidad)
## Vemos la normalidad en todos los grupos vemos que ambos grupos
## tienen p > 0.05, hay normalidad en los datos
diversidad_alpha %>%
group_by(donor_status) %>%
shapiro_test(diversidad)
## Vemos la homocedasticidad de los datos p > 0.05
diversidad_alpha %>%
levene_test(diversidad~donor_status,
center = mean)
## Hacemos un t.test p < 0.05
diversidad_alpha %>%
t_test(diversidad~donor_status)
## Mínimo
diversidad_alpha %>%
summarise(min_shannon=min(diversidad))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad)) +
geom_boxplot()
ggplot(aes(donor_status, diversidad, fill=donor_status) +
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot()
))))))))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot()
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot() +
stat_function(fun = "mean", color="red") +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_function(fun = "mean", color="red") +
scale_fill_manual(values = c("white", "orange"))
?stat_function()
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_function(stat = mean, color="red") +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_function(fun = mean, color="red") +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_function(fun = "mean", color="red") +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_summary(fun = "mean", color="red") +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_summary(fun = "mean", color="red", size=2) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_summary(fun = "mean", color="red", geom = "crossbar") +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_summary(fun = "mean", color="red", geom = "crossbar", widht=.5) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_summary(fun = "mean", color="red", geom = "crossbar", width=.5) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_summary(fun = "mean", color="red", geom = "crossbar", width=.75) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSE) +
stat_summary(fun = "mean", color="red", geom = "crossbar", width=.75) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSE) +
stat_summary(fun = "mean", color="red", geom = "crossbar", width=.75) +
scale_fill_manual(values = c("white", "orange"))
## Mínimo
diversidad_alpha %>%
summarise(min_shannon=min(diversidad))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSE) +
stat_summary(fun = "mean", color="red", geom = "crossbar", width=.75) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5) +
stat_summary(fun = "mean", color="red", geom = "crossbar", width=.75) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSE) +
stat_summary(fun = "mean", color="red", geom = "crossbar", width=.75) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSE) +
stat_summary(fun = "mean", color="red", geom = "crossbar",
width=.75, show.legend = FALSE) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSEn width=.5) +
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSE, width=.5) +
stat_summary(fun = "mean", color="red", geom = "crossbar",
width=.75, show.legend = FALSE) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSE, width=.5) +
stat_summary(fun = "mean", color="red", geom = "crossbar",
width=.5, show.legend = FALSE) +
scale_fill_manual(values = c("white", "orange"))
diversidad_alpha %>%
ggplot(aes(donor_status, diversidad, fill=donor_status)) +
geom_boxplot(alpha=.5, show.legend = FALSE, width=.5) +
stat_summary(fun = "mean", color="red", geom = "crossbar",
width=.5, show.legend = FALSE) +
scale_fill_manual(values = c("white", "orange")) +
theme_classic()
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
## Hacemos un t.test p < 0.05
diversidad_alpha %>%
t_test(diversidad~donor_status)
knitr::opts_chunk$set(echo = TRUE)
# Paquetes necesarios
packages <- c("tidyverse", "seqinr")
# Instalamos los paquetes
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)){
install.packages(packages[!installed_packages])
}
# Cargar las librarías
invisible(lapply(packages, library, character.only = TRUE))
url1 <- "https://www.dropbox.com/s/ms29mvjj0pdq9oz/evaluacionR.csv?dl=1"
fichero <- "../data_raw/df.csv"
sistema_operativo <- "linux" # Poner si se encuenctra en windows o linux
# # Windows
# # download.file(url,"../data_raw/df.csv", method="wininet")
# # Linux
if(sistema_operativo == "linux" && !file.exists(fichero)){
download.file(url1,fichero, method="wget")
print("Has descargado los datos para Linux")
} else if(sistema_operativo == "windows" && !file.exists(fichero)){
### No funciona muy bien en Windows esta condicion por las rutas
download.file(url1,fichero, method="wininet")
print("Has descargado los datos para Windows")
} else{
print("Los datos ya estaban descargados")
}
url1 <- "https://www.dropbox.com/s/ms29mvjj0pdq9oz/evaluacionR.csv?dl=1"
fichero <- "../data_raw/df.csv"
sistema_operativo <- "windows" # Poner si se encuenctra en windows o linux
# # Windows
# # download.file(url,"../data_raw/df.csv", method="wininet")
# # Linux
if(sistema_operativo == "linux" && !file.exists(fichero)){
download.file(url1,fichero, method="wget")
print("Has descargado los datos para Linux")
} else if(sistema_operativo == "windows" && !file.exists(fichero)){
### No funciona muy bien en Windows esta condicion por las rutas
download.file(url1,fichero, method="wininet")
print("Has descargado los datos para Windows")
} else{
print("Los datos ya estaban descargados")
}
getwd
getwd()
